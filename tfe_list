import requests
import os
import json

# --- Configurações do Terraform Enterprise ---
TFE_HOSTNAME = "https://app.terraform.io"  # Ou seu hostname customizado do Terraform Enterprise
TFE_TOKEN = os.environ.get("TFE_TOKEN") # Recomenda-se usar uma variável de ambiente para o token
ORGANIZATION_NAME = "sua-organizacao" # Substitua pela sua organização

def make_tfe_request(method, path, data=None):
    """
    Função auxiliar para fazer requisições à API do Terraform Enterprise.
    """
    headers = {
        "Authorization": f"Bearer {TFE_TOKEN}",
        "Content-Type": "application/vnd.api+json",
    }
    url = f"{TFE_HOSTNAME}/api/v2/{path}"

    try:
        response = requests.request(method, url, headers=headers, json=data)
        response.raise_for_status() # Lança uma exceção para códigos de status HTTP 4xx/5xx
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Erro na requisição para {url}: {e}")
        if hasattr(e, 'response') and e.response is not None:
            print(f"Status Code: {e.response.status_code}")
            print(f"Response Body: {e.response.text}")
        raise # Re-lança a exceção para que a função chamadora possa lidar com ela

def list_vcs_identifiers():
    """
    Lista os nomes dos VCS identifiers configurados na organização do Terraform Enterprise.
    """
    if not TFE_TOKEN:
        print("Erro: A variável de ambiente TFE_TOKEN não está definida. Por favor, defina-a.")
        return

    # Primeiro, obter o ID da organização
    try:
        org_response = make_tfe_request("GET", f"organizations/{ORGANIZATION_NAME}")
        organization_id = org_response["data"]["id"]
        print(f"Organização '{ORGANIZATION_NAME}' encontrada (ID: {organization_id}).")
    except Exception as e:
        print(f"Erro ao obter a organização '{ORGANIZATION_NAME}': {e}")
        return

    # Em seguida, listar os OAuth Tokens (que representam os VCS Providers)
    try:
        oauth_tokens_response = make_tfe_request("GET", f"organizations/{organization_id}/oauth-tokens")
        
        oauth_tokens_data = oauth_tokens_response["data"]
        
        if oauth_tokens_data:
            print("\nNomes dos VCS Identifiers encontrados:")
            for token in oauth_tokens_data:
                # O nome do provedor (tipo) está dentro do relacionamento oauth-client
                oauth_client_id = token.get("relationships", {}).get("oauth-client", {}).get("data", {}).get("id")

                # Se conseguirmos o ID do cliente OAuth, tentamos obter os detalhes dele
                provider_type = "N/A"
                if oauth_client_id:
                    try:
                        # Precisamos buscar os detalhes do oauth-client separadamente para obter o 'service-provider'
                        oauth_client_details = make_tfe_request("GET", f"oauth-clients/{oauth_client_id}")
                        provider_type = oauth_client_details.get("data", {}).get("attributes", {}).get("service-provider", "N/A")
                    except Exception as e:
                        print(f"Aviso: Não foi possível obter detalhes do oauth-client {oauth_client_id}: {e}")

                # O identificador do usuário do provedor está em 'service-provider-user'
                provider_username = token.get("attributes", {}).get("service-provider-user", "N/A")

                print(f"- Tipo: {provider_type}, Identificador: {provider_username}")
        else:
            print(f"Nenhum VCS Identifier encontrado para a organização '{ORGANIZATION_NAME}'.")

    except Exception as e:
        print(f"Ocorreu um erro ao listar os VCS Identifiers: {e}")

if __name__ == "__main__":
    list_vcs_identifiers()
