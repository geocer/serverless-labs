provider "aws" {
  region = "eu-west-1"

  # Make it faster by skipping something
  skip_metadata_api_check     = true
  skip_region_validation      = true
  skip_credentials_validation = true
}

locals {
  eventbridge_configs = {for config in var.eventbridge_config : config.function_name => config}
  lambda_configs      = {for config in var.eventbridge_config : config.function_name => config}
  package_url         = "https://raw.githubusercontent.com/terraform-aws-modules/terraform-aws-lambda/master/examples/fixtures/python3.8-zip/existing_package.zip"
  downloaded          = "downloaded_package_${md5(local.package_url)}.zip"
}

resource "null_resource" "download_package" {
  triggers = {
    downloaded = local.downloaded
  }

  provisioner "local-exec" {
    command = "curl -L -o ${local.downloaded} ${local.package_url}"
  }
}

module "lambda" {
  for_each = local.lambda_configs
  source   = "terraform-aws-modules/lambda/aws"
  version  = "~> 6.0"

  function_name = each.value.function_name
  handler       = each.value.handler
  runtime       = each.value.runtime

  create_package              = false
  local_existing_package    = local.downloaded
  publish                     = true # Necessário para obter o ARN da versão

  create_current_version_allowed_triggers = true
  allowed_triggers = {
    EventBridge = {
      principal   = "events.amazonaws.com"
      source_arn  = module.eventbridge[each.key].eventbridge_rule_arns["default"] # Referencia a regra do EventBridge correspondente
      qualifier   = "$LATEST"
      statement_id = "AllowEventBridgeTrigger"
    }
  }
}

module "eventbridge" {
  for_each = local.eventbridge_configs
  source   = "../../"

  create_bus = false

  rules = {
    default = {
      description           = each.value.description
      schedule_expression = each.value.schedule_expression
    }
  }

  targets = {
    default = [
      {
        name = "${each.key}-target"
        arn  = module.lambda[each.key].lambda_function_arn
        input = jsonencode({ "triggered_by": "eventbridge", "function": each.value.function_name })
      }
    ]
  }
}

##################
# Extra resources
##################

resource "random_pet" "this" {
  length = 2
}

output "lambda_function_arns" {
  value = {for name, lambda_module in module.lambda : name => lambda_module.lambda_function_arn}
}

output "eventbridge_rule_arns" {
  value = {for name, eb_module in module.eventbridge : name => eb_module.eventbridge_rule_arns}
}



provider "aws" {
  region = local.region

  # Make it faster by skipping something
  skip_metadata_api_check     = true
  skip_region_validation      = true
  skip_credentials_validation = true
}

locals {
  bucket_name = "s3-website-${random_pet.this.id}"
  region      = "eu-west-1"
  vpc_id      = "vpc-xxxxxxxxxxxxxxxxx" # Substitua pelo seu VPC ID
}

data "aws_caller_identity" "current" {}

data "aws_canonical_user_id" "current" {}

data "aws_cloudfront_log_delivery_canonical_user_id" "cloudfront" {}

resource "random_pet" "this" {
  length = 2
}

resource "aws_kms_key" "objects" {
  description               = "KMS key is used to encrypt bucket objects"
  deletion_window_in_days = 7
}

resource "aws_iam_role" "this" {
  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "ec2.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

# Criação do VPC Endpoint para S3
resource "aws_vpc_endpoint" "s3" {
  vpc_id       = local.vpc_id
  service_name = "com.amazonaws.${local.region}.s3"

  policy = jsonencode({
    "Version" : "2012-10-17",
    "Statement" : [
      {
        "Sid" : "AllowAccessFromVPC",
        "Principal" : "*",
        "Action" : "s3:*",
        "Effect" : "Allow",
        "Resource" : "arn:aws:s3:::${local.bucket_name}"
      },
      {
        "Sid" : "AllowAccessToBucketObjectsFromVPC",
        "Principal" : "*",
        "Action" : "s3:*",
        "Effect" : "Allow",
        "Resource" : "arn:aws:s3:::${local.bucket_name}/*"
      }
    ]
  })

  route_table_ids = [] # Adicione os IDs das route tables da sua VPC que devem usar este endpoint
}

data "aws_iam_policy_document" "bucket_policy" {
  statement {
    principals {
      type        = "AWS"
      identifiers = [aws_iam_role.this.arn]
    }

    actions = [
      "s3:ListBucket",
    ]

    resources = [
      "arn:aws:s3:::${local.bucket_name}",
    ]
  }

  # Adiciona permissão para o VPC Endpoint acessar o bucket
  statement {
    sid = "AllowVPCEndpointAccess"
    principals {
      type = "AWS"
      identifiers = ["*"] # Em um cenário real, você pode restringir ainda mais
    }
    actions = [
      "s3:GetObject",
      "s3:ListBucket"
    ]
    resources = [
      "arn:aws:s3:::${local.bucket_name}",
      "arn:aws:s3:::${local.bucket_name}/*"
    ]
    condition {
      test     = "StringEquals"
      variable = "aws:sourceVpce"
      values   = [aws_vpc_endpoint.s3.id]
    }
  }

  # Permite acesso público de leitura para o website (se necessário)
  statement {
    sid = "AllowPublicRead"
    principals {
      type        = "*"
      identifiers = ["*"]
    }
    actions = [
      "s3:GetObject"
    ]
    resources = [
      "arn:aws:s3:::${local.bucket_name}/*"
    ]
    condition {
      test     = "IpAddress"
      variable = "aws:SourceIp"
      values   = ["0.0.0.0/0"] # Restrinja os IPs conforme necessário
    }
  }
}

module "log_bucket" {
  source = "../../"

  bucket        = "logs-${random_pet.this.id}"
  force_destroy = true

  control_object_ownership = true

  attach_elb_log_delivery_policy        = true
  attach_lb_log_delivery_policy         = true
  attach_access_log_delivery_policy    = true
  attach_deny_insecure_transport_policy = true
  attach_require_latest_tls_policy      = true

  access_log_delivery_policy_source_accounts   = [data.aws_caller_identity.current.account_id]
  access_log_delivery_policy_source_buckets    = ["arn:aws:s3:::${local.bucket_name}"]
  access_log_delivery_policy_source_organizations = ["o-123456"]
  lb_log_delivery_policy_source_organizations     = ["o-123456"]
}

module "cloudfront_log_bucket" {
  source = "../../"

  bucket                  = "cloudfront-logs-${random_pet.this.id}"
  control_object_ownership = true
  object_ownership        = "ObjectWriter"

  grant = [{
    type        = "CanonicalUser"
    permission  = "FULL_CONTROL"
    id          = data.aws_canonical_user_id.current.id
  }, {
    type        = "CanonicalUser"
    permission  = "FULL_CONTROL"
    id          = data.aws_cloudfront_log_delivery_canonical_user_id.cloudfront.id # Ref. https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html
  }]

  owner = {
    id = data.aws_canonical_user_id.current.id
  }

  force_destroy = true
}

module "simple_bucket" {
  source = "../../"

  bucket        = "simple-${random_pet.this.id}"
  force_destroy = true
}

module "s3_bucket" {
  source = "../../"

  bucket = local.bucket_name

  force_destroy               = true
  acceleration_status       = "Suspended"
  request_payer             = "BucketOwner"

  tags = {
    Owner = "Anton"
  }

  # Note: Object Lock configuration can be enabled only on new buckets
  # https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_object_lock_configuration
  object_lock_enabled = true
  object_lock_configuration = {
    rule = {
      default_retention = {
        mode = "GOVERNANCE"
        days = 1
      }
    }
  }

  # Bucket policies
  attach_policy                             = true
  policy                                    = data.aws_iam_policy_document.bucket_policy.json
  attach_deny_insecure_transport_policy    = true
  attach_require_latest_tls_policy         = true
  attach_deny_incorrect_encryption_headers = true
  attach_deny_incorrect_kms_key_sse         = true
  allowed_kms_key_arn                       = aws_kms_key.objects.arn
  attach_deny_unencrypted_object_uploads   = true
  attach_deny_ssec_encrypted_object_uploads = true

  # S3 bucket-level Public Access Block configuration (by default now AWS has made this default as true for S3 bucket-level block public access)
  # block_public_acls    = true
  # block_public_policy  = true
  # ignore_public_acls   = true
  # restrict_public_buckets = true

  # S3 Bucket Ownership Controls
  # https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket_ownership_controls
  control_object_ownership = true
  object_ownership        = "BucketOwnerPreferred"

  expected_bucket_owner                 = data.aws_caller_identity.current.account_id
  transition_default_minimum_object_size = "varies_by_storage_class"

  acl = "private" # "acl" conflicts with "grant" and "owner"

  logging = {
    target_bucket              = module.log_bucket.s3_bucket_id
    target_prefix              = "log/"
    target_object_key_format = {
      partitioned_prefix = {
        partition_date_source = "DeliveryTime" # "EventTime"
      }
      # simple_prefix = {}
    }
  }

  versioning = {
    status     = true
    mfa_delete = false
  }

  website = {
    index_document = "index.html"
    error_document = "error.html"
    routing_rules = [{
      condition = {
        key_prefix_equals = "docs/"
      },
      redirect = {
        replace_key_prefix_with = "documents/"
      }
    }, {
      condition = {
        http_error_code_returned_equals = 404
        key_prefix_equals               = "archive/"
      },
      redirect = {
        host_name        = "archive.myhost.com"
        http_redirect_code = 301
        protocol         = "https"
        replace_key_with = "not_found.html"
      }
    }]
  }

  server_side_encryption_configuration = {
    rule = {
      apply_server_side_encryption_by_default = {
        kms_master_key_id = aws_kms_key.objects.arn
        sse_algorithm     = "aws:kms"
      }
    }
  }

  cors_rule = [
    {
      allowed_methods = ["PUT", "POST"]
      allowed_origins = ["https://modules.tf", "https://terraform-aws-modules.modules.tf"]
      allowed_headers = ["*"]
      expose_headers  = ["ETag"]
      max_age_seconds = 3000
    }, {
      allowed_methods = ["PUT"]
      allowed_origins = ["https://example.com"]
      allowed_headers = ["*"]
      expose_headers  = ["ETag"]
      max_age_seconds = 3000
    }
  ]

  lifecycle_rule = [
    {
      id      = "log"
      enabled = true

      filter = {
        tags = {
          some    = "value"
          another = "value2"
        }
      }

      transition = [
        {
          days          = 30
          storage_class = "ONEZONE_IA"
        }, {
          days          = 60
          storage_class = "GLACIER"
        }
      ]

      # expiration = {
      #   days = 90
      #   expired_object_delete_marker = true
      # }

      # noncurrent_version_expiration = {
      #   newer_noncurrent_versions = 5
      #   days = 30
      # }
    },
    {
      id                                    = "log1"
      enabled                               = true
      abort_incomplete_multipart_upload_days = 7

      noncurrent_version_transition = [
        {
          days          = 30
          storage_class = "STANDARD_IA"
        },
        {
          days          = 60
          storage_class = "ONEZONE_IA"
        },
        {
          days          = 90
          storage_class = "GLACIER"
        },
      ]

      noncurrent_version_expiration = {
        days = 300
      }
    },
    {
      id      = "log2"
      enabled = true

      filter = {
        prefix                    = "log1/"
        object_size_greater_than = 200000
        object_size_less_than    = 500000
        tags = {
          some    = "value"
          another = "value2"
        }
      }

      noncurrent_version_transition = [
        {
          days          = 30
          storage_class = "STANDARD_IA"
        },
      ]

      noncurrent_version_expiration = {
        days = 300
      }
    },
  ]

  intelligent_tiering = {
    general = {
      status = "Enabled"
      filter = {
        prefix = "/"
        tags = {
          Environment = "dev"
        }
      }
      tiering = {
        ARCHIVE_ACCESS = {
          days = 180
        }
      }
    },
    documents = {
      status = false
      filter = {
        prefix = "documents/"
      }
      tiering = {
        ARCHIVE_ACCESS = {
          days = 125
        }
        DEEP_ARCHIVE_ACCESS = {
          days = 200
        }
      }
    }
  }

  metric_configuration = [
    {
      name = "documents"
      filter = {
        prefix = "documents/"
        tags = {
          priority = "high"
        }
      }
    },
    {
      name = "other"
      filter = {
        tags = {
          production = "true"
        }
      }
    },
    {
      name = "all"
    }
  ]
}



provider "aws" {
  region = local.region
}

locals {
  name_prefix = "flowmetrics"
  region      = "eu-west-1"

  tags = {
    GithubRepo = "terraform-aws-apigateway-v2"
    GithubOrg  = "terraform-aws-modules"
  }

  api_gateway_configs = {
    for config in var.api_gateway_config : config.name => config
  }
}

################################################################################
# Lambda Function Module
################################################################################

module "lambda_function" {
  for_each = local.api_gateway_configs
  source   = "terraform-aws-modules/lambda/aws"
  version  = "~> 7.0"

  function_name = each.value.function_name
  description   = each.value.description
  handler       = each.value.handler
  runtime       = each.value.runtime
  architectures = ["arm64"]
  publish       = true

  create_package          = false
  local_existing_package = local.downloaded

  cloudwatch_logs_retention_in_days = 7

  tags = merge(local.tags, {
    Example = each.value.name
  })
}

locals {
  package_url = "https://raw.githubusercontent.com/terraform-aws-modules/terraform-aws-lambda/master/examples/fixtures/python-function.zip"
  downloaded  = "downloaded_package_${md5(local.package_url)}.zip"
}

resource "null_resource" "download_package" {
  triggers = {
    downloaded = local.downloaded
  }

  provisioner "local-exec" {
    command = "curl -L -o ${local.downloaded} ${local.package_url}"
  }
}

################################################################################
# API Gateway Module
################################################################################

module "api_gateway" {
  for_each = local.api_gateway_configs
  source   = "../../"

  # API
  body = templatefile("api.yaml", {
    example_function_arn = module.lambda_function[each.key].lambda_function_arn
  })

  cors_configuration = {
    allow_headers = ["content-type", "x-amz-date", "authorization", "x-api-key", "x-amz-security-token", "x-amz-user-agent"]
    allow_methods = ["*"]
    allow_origins = ["*"]
  }

  description        = each.value.description
  fail_on_warnings   = false
  name               = each.value.name
  protocol_type      = "HTTP" # Ensure it's an HTTP API for the OpenAPI body

  # Domain Name (Optional - Only create if domain_name is provided)
  domain_name        = each.value.domain_name != "" ? each.value.domain_name : null
  create_domain_records = each.value.domain_name != "" ? true : false
  create_certificate   = each.value.domain_name != "" ? true : false

  tags = merge(local.tags, {
    Example = each.value.name
  })

  # Note: Other configurations like authorizers, mTLS are removed for simplicity based on the requirement
  # You can add them back within the for_each loop if needed for each API Gateway instance
}
